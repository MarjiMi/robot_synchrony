---
title: 'Robot Study Data Cleaning'
author: "Michelle Marji, Siddharth Suresh, Megh Doshi"
date: "2024-12-21"
format: 
  html: 
    embed-resources: true
    toc: true 
    toc_depth: 4
editor_options: 
  chunk_output_type: console
---

#### Packages 
```{r}
library(readr)
library(ggplot2, exclude = "alpha")
library(tidyr, exclude = c("expand", "pack", "unpack")) # reshape wide format
library(skimr)
library(dplyr)
library(psych, exclude = c("alpha", "%+%", "rescale"))
library(effectsize, exclude = "phi") # partial eta squared
library(carData)
library(car, exclude = c("logit", "recode", "some"))
library(purrr, exclude = c("some", "transpose"))
library(tidyverse)
library(GGally)
library(lattice)
library(kableExtra, exclude = "group_rows")
library(effects)
library(MASS)
library(lm.beta)
library(janitor)

# Function
get_peta2 = function(lmer_model, focal_predictor) {
  a = Anova(lmer_model, type = 3, test = "F")
  f = a[focal_predictor, 'F']
  df_n = a[focal_predictor, 'Df']
  df_d = a[focal_predictor, 'Df.res']
  peta2 = (f * df_n) / (f * df_n + df_d)
  return(peta2)
}

```

# GGplot Predict Function
```{r}
# generates predictions and confidence intervals for a given model (Model) using the ggplot2 package. It handles different types of models such as linear models (lm), generalized linear models (glm), and linear mixed-effects models (lmerMod, glmerMod). The function returns a data frame with predicted values, confidence intervals, and standard errors.
ggplotPredict = function (Model, Data = NULL, Label = NULL, Type = "response") 
{
  if (is.null(Data) & class(Model)[1] == "lm") {
    return(fitted.values(Model))
  }
  else {
    if (is.null(Label)) {
      PredictName = "Predicted"
      CILoName = "CILo"
      CIHiName = "CIHi"
      SEName = "SE"
    }
    else {
      PredictName = paste0("Predicted", Label)
      CILoName = paste0("CILo", Label)
      CIHiName = paste0("CIHi", Label)
      SEName = paste0("SE", Label)
    }
    Predictions = matrix(data = NA, nrow = nrow(Data), ncol = 4, 
                         dimnames = list(1:nrow(Data), c(PredictName, CILoName, 
                                                         CIHiName, SEName)))
    if (class(Model)[1] == "lm") {
      CILevel = 1 - 2 * pt(c(2), df = Model$df.residual, 
                    lower.tail = FALSE) # this code calculates +- 1 SE of the point estimate for error bars
      # can change the pt(c(2)) to a 1 to be +-1 SE
      Predictions[, 1:3] = predict(Model, newdata = Data, 
                                   interval = "confidence", level = CILevel)
      Predictions[, 4] = Predictions[, 1] - Predictions[, 
                                                        2]
      Predictions = as.data.frame(Predictions)
    }
    if (class(Model)[1] == "glm") {
      tmpPred = predict(Model, newdata = Data, type = "link", 
                        se.fit = TRUE)
      upr <- tmpPred$fit + tmpPred$se.fit
      lwr <- tmpPred$fit - tmpPred$se.fit
      fit <- tmpPred$fit
      if (Type == "response") {
        fit <- Model$family$linkinv(fit)
        upr <- Model$family$linkinv(upr)
        lwr <- Model$family$linkinv(lwr)
      }
      Predictions[, 1] = fit
      Predictions[, 2] = lwr
      Predictions[, 3] = upr
      Predictions[, 4] = Predictions[, 1] - Predictions[, 
                                                        2]
      Predictions = as.data.frame(Predictions)
    }
    if ((class(Model)[1] == "lmerMod") || (class(Model)[1] == 
                                           "glmerMod")) {
      Predictions[, c(1, 4)] = AICcmodavg::predictSE(Model, Data, 
                                         se.fit = TRUE, type = Type, level = 0, print.matrix = TRUE)
      Predictions[, 2] = Predictions[, 1] - Predictions[, 
                                                        4]
      Predictions[, 3] = Predictions[, 1] + Predictions[, 
                                                        4]
    }
    if (any(names(Data) == PredictName) || any(names(Data) == 
                                               CILoName) || any(names(Data) == CIHiName) || any(names(Data) == 
                                                                                                SEName)) {
      warning("Variable names (Predicted, CILo, CIHi, SE with Label PostFix) used in Data.  These variables removed before merging in predicted values")
      Data[, c(PredictName, CILoName, CIHiName, SEName)] = list(NULL)
    }
    Data = data.frame(Predictions, Data)
    return(Data)
  }
}
```

# Read in data
```{r}
# Survey Data
d1 <- read_csv("data/survey_1.csv") |>
  clean_names()
d2 <- read_csv("data/survey_2.csv") |>
  clean_names()
d3 <- read_csv("data/survey_3.csv") |>
  clean_names()
d4 <- read_csv("data/survey_4.csv") |>
  clean_names()

# Computer Task Data
dc <- read_csv("data/computer_task_data.csv") |>
  clean_names()
```

# Clean data
```{r}
# Remove 1st 2 rows (question + description)
d1 <- d1[-c(1, 2), ]
d2 <- d2[-c(1, 2), ]
d3 <- d3[-c(1, 2), ]
d4 <- d4[-c(1, 2), ]

# Remove variables (status, ip_address, progress, finished, recorded_date, response_id, recipient_last_name, recipient_first_name, recipient_email, external_reference, location_latitude, location_longitude, distribution_channel, user_language)
d1 <- d1 |> dplyr::select(-status, -ip_address, -progress, -finished, -recorded_date, -response_id, -recipient_last_name, -recipient_first_name, -recipient_email, -external_reference, -location_latitude, -location_longitude, -distribution_channel, -user_language)

d2 <- d2 |> dplyr::select(-status, -ip_address, -progress, -finished, -recorded_date, -response_id, -recipient_last_name, -recipient_first_name, -recipient_email, -external_reference, -location_latitude, -location_longitude, -distribution_channel, -user_language)

d3 <- d3 |> dplyr::select(-status, -ip_address, -progress, -finished, -recorded_date, -response_id, -recipient_last_name, -recipient_first_name, -recipient_email, -external_reference, -location_latitude, -location_longitude, -distribution_channel, -user_language)

d4 <- d4 |> dplyr::select(-status, -ip_address, -progress, -finished, -recorded_date, -response_id, -recipient_last_name, -recipient_first_name, -recipient_email, -external_reference, -location_latitude, -location_longitude, -distribution_channel, -user_language)


# Change variable names robot computer game data
new_names <- c("sub_id", "game_1_e",	"game_2_m",	"game_3_h",	"game_4_e",	"game_5_m",	"game_6_h",	"game_7_e",	"game_8_m",	"game_9_h_success",	"game_10_e", "game_11_m",	"game_12_h",	"game_13_e",	"game_14_m",	"game_15_h",	"game_16_e",	"game_17_m",	"game_18_h_fail",	"game_19_e",	"game_20_m",	"game_21_h",	"game_22_e",	"game_23_m",	"game_24_h",	"game_25_e",	"game_26_m",	"game_27_h",	"game_28_e",	"game_29_m",	"game_30_h")  

# Rename the variables
dc <- dc |>
  set_names(new_names)

# Add condition variable
group_0 <- c(4, 10, 11, 15, 18, 20, 23, 36, 37, 40, 43, 45, 55, 65)
group_1 <- c(1, 6, 7, 13, 16, 25, 32, 33, 35, 38, 39, 42, 46, 58, 60)

d1 <- d1 |>
  mutate(condition = ifelse(sub_id %in% group_0, 0, 
                           ifelse(sub_id %in% group_1, 1, NA)))
d2 <- d2 |>
  mutate(condition = ifelse(sub_id %in% group_0, 0, 
                           ifelse(sub_id %in% group_1, 1, NA)))
d3 <- d3 |>
  mutate(condition = ifelse(sub_id %in% group_0, 0, 
                           ifelse(sub_id %in% group_1, 1, NA)))
d4 <- d4 |>
  mutate(condition = ifelse(sub_id %in% group_0, 0, 
                           ifelse(sub_id %in% group_1, 1, NA)))
dc <- dc |>
  mutate(condition = ifelse(sub_id %in% group_0, 0, 
                           ifelse(sub_id %in% group_1, 1, NA)))



# Remove participants who did not do in person session
d1 <- d1 |>
  filter(!sub_id %in% c(22, 30, 51, 59, 67) & !is.na(sub_id))

# Remove test entries from survey data
d2 <- d2 |>
  filter(!sub_id %in% c(0, 98, 99, 100) & !is.na(sub_id))
d2 <- d2 |>
  filter(!(sub_id == 60 & duration_in_seconds == 261201))

d3 <- d3 |>
  filter(!sub_id %in% c(0, 98, 99, 100) & !is.na(sub_id))

d4 <- d4 |>
  filter(!sub_id %in% 100 & !is.na(sub_id))

dc <- dc |>
  filter(!sub_id %in% c(98, 100))

# change variabls to numeric (survey 1)
#gators_scale
d1 <- d1 |>
  mutate(across(c(gators_scale_1_1, gators_scale_1_2, gators_scale_1_3, gators_scale_1_5, gators_scale_1_6,
                  gators_scale_2_1, gators_scale_2_2, gators_scale_2_3, gators_scale_2_4, gators_scale_2_5, gators_scale_3_1,
                  gators_scale_3_2, gators_scale_3_3, gators_scale_3_4, gators_scale_3_6, gators_scale_4_1,
                  gators_scale_4_2, gators_scale_4_3, gators_scale_4_4, 
                  gators_scale_4_5), ~ as.numeric(.)))

#risk_questions
d1 <- d1 |>
  mutate(across(c(risk_questions_1, risk_questions_2, risk_questions_3,
                  risk_questions_4, risk_questions_5, risk_questions_6,
                  risk_questions_7, risk_questions_8), ~ as.numeric(.)))

#robot_tech
d1 <- d1 |>
  mutate(across(c(robot_tech_1, robot_tech_2, robot_tech_3, robot_tech_4, 
                  robot_tech_5, robot_tech_6, trust_technology_1, trust_technology_2,  
                  trust_technology_3, trust_technology_4, trust_technology_5,
                  trust_technology_6), ~       as.numeric(.)))
#self_confidence
d1 <- d1 |>
  mutate(across(c(self_confidence_1, self_confidence_2, self_confidence_3,
                  self_confidence_4, self_confidence_5, self_confidence_6), ~ as.numeric(.)))

# change variables to numeric (survey 2)
#gators_scale
d2 <- d2 |>
  mutate(across(c(gators_scale_1_1, gators_scale_1_2, gators_scale_1_3, gators_scale_1_5, gators_scale_1_6,
                  gators_scale_2_1, gators_scale_2_2, gators_scale_2_3,
                  gators_scale_2_4, gators_scale_2_5, gators_scale_3_1,
                  gators_scale_3_2, gators_scale_3_3, gators_scale_3_4, gators_scale_3_6, gators_scale_4_1,
                  gators_scale_4_2, gators_scale_4_3, gators_scale_4_4, 
                  gators_scale_4_5), ~ as.numeric(.)))

d2 <- d2 |>
  mutate(across(c(toast_1_1, toast_1_2, toast_1_3, toast_1_4,
                  toast_2_1, toast_2_2, toast_2_3, toast_3_1,
                  toast_3_2, toast_3_3), ~ as.numeric(.)))

#mdmt
d2 <- d2 |>
  mutate(across(c(mdmt_1_1, mdmt_1_2, mdmt_1_3, mdmt_1_4,
                  mdmt_2_1, mdmt_2_2, mdmt_2_3, mdmt_2_4,
                  mdmt_3_1, mdmt_3_2, mdmt_3_3, mdmt_3_4,
                  mdmt_4_1, mdmt_4_2, mdmt_4_3, mdmt_4_4), ~ as.numeric(.)))

#rosas
d2 <- d2 |>
  mutate(across(c(rosas_1_1, rosas_1_2, rosas_1_3,
                   rosas_1_4, rosas_1_5, rosas_1_6,
                   rosas_2_1, rosas_2_2, rosas_2_3,
                   rosas_2_4, rosas_2_5, rosas_2_6,
                   rosas_3_1, rosas_3_2, rosas_3_3,
                   rosas_3_4, rosas_3_5, rosas_3_6), ~ as.numeric(.)))
#intentionality
d2 <- d2 |>
  mutate(across(c(intentionality_1, intentionality_2), ~ as.numeric(.)))

# self efficacy
d2 <- d2 |>
  mutate(across(c(self_efficacy_influ_1, self_efficacy_influ_2,
                  self_efficacy_influ_3), ~ as.numeric(.)))

# fluency
d2 <- d2 |>
  mutate(across(c(fluency_1_1, fluency_1_2, fluency_1_3,
                  fluency_2_1, fluency_2_2, fluency_2_3), ~ as.numeric(.)))


# change variabls to numeric (survey 3)
#synchrony
d3 <- d3 |>
  mutate(across(c(synchrony_1, synchrony_2, synchrony_3,
                  synchrony_4, synchrony_5), ~ as.numeric(.)))
#enjoy_task
d3 <- d3 |>
  mutate(across(c(enjoy_task_1, enjoy_task_2, enjoy_task_3, 
                  enjoy_task_4, enjoy_task_5), ~ as.numeric(.)))

# Reverse code
# take max possible score and add 1. Then subtract the original scores from that to get the reverse scored value.
#self_confidence = 7 max score
#gators_scale = 7 max score
#robot_tech = 5 max score
#rosas = 9 max score
#synchrony = 7 max score
#enjoy_task = 7 max score

# Reverse coded items (survey 1)
reverse_vars_1 = c("gators_scale_1_2", "gators_scale_1_5",
                    "gators_scale_2_2",
                 "gators_scale_2_4", "gators_scale_2_5",
                 "trust_technology_4", "gators_scale_3_2",
                 "gators_scale_3_4", "gators_scale_4_2",
                 "gators_scale_4_4", "gators_scale_4_5",
                 "self_confidence_4", "self_confidence_5",
                 "self_confidence_6") 
                  # variables to reverse code + "robot_tech_4"

# reverse code survey 1 vars
d1[ , reverse_vars_1] = 7 - d1[ , reverse_vars_1]
d1$robot_tech_4 = 5 - d1$robot_tech_4

# Reverse coded items (survey 2)
reverse_vars_2_1 = c("gators_scale_1_2", "gators_scale_1_5",
                 "gators_scale_2_2", "gators_scale_2_4",
                 "gators_scale_2_5", "gators_scale_3_2",
                 "gators_scale_3_4", "gators_scale_4_2",
                 "gators_scale_4_4", "gators_scale_4_5") 
                  # variables to reverse code
reverse_vars_2_2 = c("rosas_1_3", "rosas_1_6", "rosas_2_3",
                 "rosas_2_6", "rosas_3_3", "rosas_3_6") 
                  # variables to reverse code

# reverse code survey 2 vars
d2[ , reverse_vars_2_1] = 7 - d2[ , reverse_vars_2_1]
d2[ , reverse_vars_2_2] = 9 - d2[ , reverse_vars_2_2]

# Reverse coded items (survey 3)
reverse_vars_3 = c("synchrony_4", "synchrony_5", "enjoy_task_4",
                   "enjoy_task_5") 
                  # variables to reverse code

# reverse code survey 3 vars
d3[ , reverse_vars_3] = 7 - d3[ , reverse_vars_3]
```

# Composite variables - survey 1
```{r}
# gators scale (trust) composite score
gators_1 <- data.frame("gators_scale_1_1" = d1$gators_scale_1_1,
                        "gators_scale_1_2" = d1$gators_scale_1_2,
                        "gators_scale_1_3" = d1$gators_scale_1_3,
                        "gators_scale_1_5" = d1$gators_scale_1_5,
                        "gators_scale_1_6" = d1$gators_scale_1_6,
                        "gators_scale_2_1" = d1$gators_scale_2_1,
                        "gators_scale_2_2" = d1$gators_scale_2_2,
                        "gators_scale_2_3" = d1$gators_scale_2_3,
                        "gators_scale_2_4" = d1$gators_scale_2_4,
                        "gators_scale_2_5" = d1$gators_scale_2_5,
                        "gators_scale_3_1" = d1$gators_scale_3_1,
                        "gators_scale_3_2" = d1$gators_scale_3_2,
                        "gators_scale_3_3" = d1$gators_scale_3_3,
                        "gators_scale_3_4" = d1$gators_scale_3_4,
                        "gators_scale_3_6" = d1$gators_scale_3_6,
                        "gators_scale_4_1" = d1$gators_scale_4_1,
                        "gators_scale_4_2" = d1$gators_scale_4_2,
                        "gators_scale_4_3" = d1$gators_scale_4_3,
                        "gators_scale_4_4" = d1$gators_scale_4_4,
                        "gators_scale_4_5" = d1$gators_scale_4_5)

# removed attention checks (gators_scale_1_4, gators_scale_3_5)

d1$gators_1 <- rowMeans(gators_1, na.rm = T)

# Attitudes towards robot technology  composite score
trust_tech_1 <- data.frame("robot_tech_1" = d1$robot_tech_1,
                        "robot_tech_2" = d1$robot_tech_2,
                        "robot_tech_3" = d1$robot_tech_3,
                        "robot_tech_4" = d1$robot_tech_4,
                        "robot_tech_5" = d1$robot_tech_5,
                        "robot_tech_6" = d1$robot_tech_6,
                        "trust_technology_1" = d1$trust_technology_1,
                        "trust_technology_2" = d1$trust_technology_2,
                        "trust_technology_3" = d1$trust_technology_3,
                        "trust_technology_4" = d1$trust_technology_4,
                        "trust_technology_5" = d1$trust_technology_5,
                        "trust_technology_6" = d1$trust_technology_6)

d1$trust_tech_1 <- rowMeans(trust_tech_1, na.rm = T)

# Risk taking tendency
risk_1 <- data.frame("risk_questions_1" = d1$risk_questions_1,
                        "risk_questions_2" = d1$risk_questions_2,
                        "risk_questions_3" = d1$risk_questions_3,
                        "risk_questions_4" = d1$risk_questions_4,
                        "risk_questions_5" = d1$risk_questions_5,
                        "risk_questions_6" = d1$risk_questions_6,
                        "risk_questions_7" = d1$risk_questions_7,
                        "risk_questions_8" = d1$risk_questions_8)

d1$risk_1 <- rowMeans(risk_1, na.rm = T)

# Self confidence
confidence_1 <- data.frame("self_confidence_1" = d1$self_confidence_1,
                        "self_confidence_2" = d1$self_confidence_2,
                        "self_confidence_3" = d1$self_confidence_3,
                        "self_confidence_4" = d1$self_confidence_4,
                        "self_confidence_5" = d1$self_confidence_5,
                        "self_confidence_6" = d1$self_confidence_6)

d1$confidence_1 <- rowMeans(confidence_1, na.rm = T)
```


# Composite variables - survey 2
```{r}
# gators scale (trust) composite score
gators_2 <- data.frame("gators_scale_1_1" = d2$gators_scale_1_1,
                        "gators_scale_1_2" = d2$gators_scale_1_2,
                        "gators_scale_1_3" = d2$gators_scale_1_3,
                        "gators_scale_1_5" = d2$gators_scale_1_5,
                        "gators_scale_1_6" = d2$gators_scale_1_6,
                        "gators_scale_2_1" = d2$gators_scale_2_1,
                        "gators_scale_2_2" = d2$gators_scale_2_2,
                        "gators_scale_2_3" = d2$gators_scale_2_3,
                        "gators_scale_2_4" = d2$gators_scale_2_4,
                        "gators_scale_2_5" = d2$gators_scale_2_5,
                        "gators_scale_3_1" = d2$gators_scale_3_1,
                        "gators_scale_3_2" = d2$gators_scale_3_2,
                        "gators_scale_3_3" = d2$gators_scale_3_3,
                        "gators_scale_3_4" = d2$gators_scale_3_4,
                        "gators_scale_3_6" = d2$gators_scale_3_6,
                        "gators_scale_4_1" = d2$gators_scale_4_1,
                        "gators_scale_4_2" = d2$gators_scale_4_2,
                        "gators_scale_4_3" = d2$gators_scale_4_3,
                        "gators_scale_4_4" = d2$gators_scale_4_4,
                        "gators_scale_4_5" = d2$gators_scale_4_5)

d2$gators_2 <- rowMeans(gators_2, na.rm = T)
d1$gators_2 <- rowMeans(gators_2, na.rm = T)

# TOAST (Trust of automated systems test)
toast <- data.frame("toast_1_1" = d2$toast_1_1,
                        "toast_1_2" = d2$toast_1_2,
                        "toast_1_3" = d2$toast_1_3,
                        "toast_1_4" = d2$toast_1_4,
                        "toast_2_1" = d2$toast_2_1, 
                        "toast_2_2"= d2$toast_2_2, 
                        "toast_2_3"= d2$toast_2_3,
                        "toast_3_1" = d2$toast_3_1, 
                        "toast_3_2"= d2$toast_3_2)

d2$toast <- rowMeans(toast, na.rm = T)
d1$toast <- rowMeans(toast, na.rm = T)
# removed attention check (toast_3_3)

# MDMT (Multi-dimensional measure of trust)
mdmt <- data.frame("mdmt_1_1" = d2$mdmt_1_1,
                        "mdmt_1_2" = d2$mdmt_1_2,
                        "mdmt_1_3" = d2$mdmt_1_3,
                        "mdmt_1_4" = d2$mdmt_1_4,
                        "mdmt_2_1" = d2$mdmt_2_1, 
                        "mdmt_2_2"= d2$mdmt_2_2, 
                        "mdmt_2_3"= d2$mdmt_2_3,
                        "mdmt_2_4"= d2$mdmt_2_4,
                        "mdmt_3_1" = d2$mdmt_3_1, 
                        "mdmt_3_2"= d2$mdmt_3_2,
                        "mdmt_3_3" = d2$mdmt_3_3, 
                        "mdmt_3_4"= d2$mdmt_3_4,
                        "mdmt_4_1" = d2$mdmt_4_1, 
                        "mdmt_4_2"= d2$mdmt_4_2,
                        "mdmt_4_3" = d2$mdmt_4_3, 
                        "mdmt_4_4"= d2$mdmt_4_4)

d2$mdmt <- rowMeans(mdmt, na.rm = T)
d1$mdmt <- rowMeans(mdmt, na.rm = T)

# ROSAS (Robotic social attributes scale)
rosas <- data.frame("rosas_1_1" = d2$rosas_1_1,
                        "rosas_1_2" = d2$rosas_1_2,
                        "rosas_1_3" = d2$rosas_1_3,
                        "rosas_1_4" = d2$rosas_1_4,
                        "rosas_1_5" = d2$rosas_1_5, 
                        "rosas_1_6"= d2$rosas_1_6,
                        "rosas_2_1" = d2$rosas_2_1,
                        "rosas_2_2" = d2$rosas_2_2,
                        "rosas_2_3" = d2$rosas_2_3,
                        "rosas_2_4" = d2$rosas_2_4,
                        "rosas_2_5" = d2$rosas_2_5, 
                        "rosas_2_6"= d2$rosas_2_6,
                        "rosas_3_1" = d2$rosas_3_1,
                        "rosas_3_2" = d2$rosas_3_2,
                        "rosas_3_3" = d2$rosas_3_3,
                        "rosas_3_4" = d2$rosas_3_4,
                        "rosas_3_5" = d2$rosas_3_5, 
                        "rosas_3_6"= d2$rosas_3_6)

d2$rosas <- rowMeans(rosas, na.rm = T)
d1$rosas <- rowMeans(rosas, na.rm = T)

# intentionality
intention <- data.frame("intentionality_1" = d2$intentionality_1,
                        "intentionality_2" = d2$intentionality_2)

d2$intention <- rowMeans(intention, na.rm = T)
d1$intention <- rowMeans(intention, na.rm = T)

# self_efficacy
self_efficacy <- data.frame("self_efficacy_influ_1" = d2$self_efficacy_influ_1,
                        "self_efficacy_influ_2" = d2$self_efficacy_influ_2,
                        "self_efficacy_influ_3" = d2$self_efficacy_influ_3)

d2$self_efficacy <- rowMeans(self_efficacy, na.rm = T)
d1$self_efficacy <- rowMeans(self_efficacy, na.rm = T)

# fluency
fluency <- data.frame("fluency_1_1" = d2$fluency_1_1,
                        "fluency_1_2" = d2$fluency_1_2,
                        "fluency_1_3" = d2$fluency_1_3,
                      "fluency_2_1" = d2$fluency_2_1,
                        "fluency_2_2" = d2$fluency_2_2,
                        "fluency_2_3" = d2$fluency_2_3)

d2$fluency <- rowMeans(fluency, na.rm = T)
d1$fluency <- rowMeans(fluency, na.rm = T)
```


# Composite variables - survey 3
```{r}
# synchrony
synchrony <- data.frame("synchrony_1" = d3$synchrony_1,
                        "synchrony_2" = d3$synchrony_2,
                        "synchrony_3" = d3$synchrony_3,
                        "synchrony_4" = d3$synchrony_4,
                        "synchrony_5" = d3$synchrony_5)

d3$synchrony <- rowMeans(synchrony, na.rm = T)
d1$synchrony <- rowMeans(synchrony, na.rm = T)

# enjoy_task
enjoy_task <- data.frame("enjoy_task_1" = d3$enjoy_task_1,
                        "enjoy_task_2" = d3$enjoy_task_2,
                        "enjoy_task_3" = d3$enjoy_task_3,
                        "enjoy_task_4" = d3$enjoy_task_4,
                        "enjoy_task_5" = d3$enjoy_task_5)

d3$enjoy_task <- rowMeans(enjoy_task, na.rm = T)
d1$enjoy_task <- rowMeans(enjoy_task, na.rm = T)

```


# Composite variables for trust computer task
```{r}
### trust game composite score of easy obstacles, no info
trust_game_e_n <- data.frame("game_1_e" = dc$game_1_e,
                        "game_4_e" = dc$game_4_e,
                        "game_7_e" = dc$game_7_e)

dc$trust_game_e_n <- rowMeans(trust_game_e_n, na.rm = T)

### trust game composite score of medium obstacles, no info
trust_game_m_n <- data.frame("game_2_m" = dc$game_2_m,
                             "game_5_m" = dc$game_5_m,
                             "game_8_m" = dc$game_8_m)

dc$trust_game_m_n <- rowMeans(trust_game_m_n, na.rm = T)

### trust game composite score of hard obstacles, no info
trust_game_h_n <- data.frame("game_3_h" = dc$game_3_h,
                             "game_6_h" = dc$game_6_h,
                             "game_9_h" = dc$game_9_h_success)

dc$trust_game_h_n <- rowMeans(trust_game_h_n, na.rm = T)

### trust game composite score of easy obstacles, success info
trust_game_e_s <- data.frame("game_10_e" = dc$game_10_e,
                             "game_13_e" = dc$game_13_e,
                             "game_16_e" = dc$game_16_e)

dc$trust_game_e_s <- rowMeans(trust_game_e_s, na.rm = T)

### trust game composite score of medium obstacles, success info
trust_game_m_s <- data.frame("game_11_m" = dc$game_11_m,
                             "game_14_m" = dc$game_14_m,
                             "game_17_m" = dc$game_17_m)

dc$trust_game_m_s <- rowMeans(trust_game_m_s, na.rm = T)

### trust game composite score of hard obstacles, success info
trust_game_h_s <- data.frame("game_12_h" = dc$game_12_h,
                             "game_15_h" = dc$game_15_h,
                             "game_18_h" = dc$game_18_h_fail)

dc$trust_game_h_s <- rowMeans(trust_game_h_s, na.rm = T)

### trust game composite score of easy obstacles, fail info
trust_game_e_f <- data.frame("game_19_e" = dc$game_19_e,
                             "game_22_e" = dc$game_22_e,
                             "game_25_e" = dc$game_25_e,
                             "game_28_e" = dc$game_28_e)

dc$trust_game_e_f <- rowMeans(trust_game_e_f, na.rm = T)

### trust game composite score of medium obstacles, fail info
trust_game_m_f <- data.frame("game_20_m" = dc$game_20_m,
                             "game_23_m" = dc$game_23_m,
                             "game_26_m" = dc$game_26_m,
                             "game_29_m" = dc$game_29_m)

dc$trust_game_m_f <- rowMeans(trust_game_m_f, na.rm = T)

### trust game composite score of hard obstacles, fail info
trust_game_h_f <- data.frame("game_21_h" = dc$game_21_h,
                             "game_24_h" = dc$game_24_h,
                             "game_27_h" = dc$game_27_h,
                             "game_30_h" = dc$game_30_h)

dc$trust_game_h_f <- rowMeans(trust_game_h_f, na.rm = T)

# Composite trust game score
trust_game <- data.frame("trust_game_e_n" = dc$trust_game_e_n,
                             "trust_game_m_n" = dc$trust_game_m_n,
                             "trust_game_h_n" = dc$trust_game_h_n,
                             "trust_game_e_s" = dc$trust_game_e_s,
                             "trust_game_m_s" = dc$trust_game_m_s,
                         "trust_game_h_s" = dc$trust_game_h_s,
                         "trust_game_e_f" = dc$trust_game_e_f,
                         "trust_game_m_f" = dc$trust_game_m_f,
                         "trust_game_h_f" = dc$trust_game_h_f)

dc$trust_game <- rowMeans(trust_game, na.rm = T)
```



# Descriptives - demographics
```{r}
# race
# 1 = Native American or Alaska Native, 2 = East Asian/East Asian American, 3 = South Asian/South Asian American, 4 = Black/African American, 5 = Middle Eastern/Arab American/North African, 6 = Latina/o/a/e or Hispanic or Chicana/o/a/e 7 = Puerto Rican, 8 = Native Hawaiian/Pacific Islander, 9 = White/European , 10 = Multiracial, 11 = Another identity not listed here, 12 = Prefer not to answer
d1 |>
  distinct(sub_id, race) |>
  group_by(race) |>
  summarise(percentage = n_distinct(sub_id) / n_distinct(d1$sub_id) * 100)

# gender
d1 |>
  distinct(sub_id, gender) |>
  group_by(gender) |>
  summarise(percentage = n_distinct(sub_id) / n_distinct(d1$sub_id) * 100)

# education_level
d1 |>
  distinct(sub_id, student_status) |>
  group_by(student_status) |>
  summarise(percentage = n_distinct(sub_id) / n_distinct(d1$sub_id) * 100)

# age
d1 <- d1 |> mutate(age = as.numeric(age))
describe(d1$age)

```

# Descriptives - trust survey 1
```{r}
describeBy(d1$gators_1, d1$condition)
describeBy(d1$trust_tech_1, d1$condition) 
describeBy(d1$risk_1, d1$condition) 
describeBy(d1$confidence_1, d1$condition) 
```

# Decriptive - trust surved 2 - survey 1

```{r}
mGators = lm(diffGators ~ condition, data = d1)
summary(mGators)
Anova(mGators, type = 3, test = "F")


write.csv(d1, "d1_for_python.csv", row.names = FALSE)
write.csv(d4, "d4_for_python.csv", row.names = FALSE)
write.csv(dc, "dc_for_python.csv", row.names = FALSE)
write.csv(d2, "d2_for_python.csv", row.names = FALSE)
write.csv(d3, "d3_for_python.csv", row.names = FALSE)

```



# Descriptives - trust survey 2
```{r}
describeBy(d2$gators_2, d2$condition)
describeBy(d2$toast, d2$condition) 
describeBy(d2$mdmt, d2$condition) 
describeBy(d2$rosas, d2$condition) 
describeBy(d2$intention, d2$condition) 
describeBy(d2$self_efficacy, d2$condition) 
describeBy(d2$fluency, d2$condition) 
```


# Descriptives - trust survey 3
```{r}
describeBy(d3$synchrony, d3$condition) 
describeBy(d3$enjoy_task, d3$condition)
```

# Descriptives - trust computer task
```{r}
describeBy(dc$trust_game, dc$condition)
describeBy(dc$trust_game_e_n, dc$condition) # easy, no info
describeBy(dc$trust_game_m_n, dc$condition) # medium, no info
describeBy(dc$trust_game_h_n, dc$condition) # hard, no info
describeBy(dc$trust_game_e_s, dc$condition) # easy, success
describeBy(dc$trust_game_m_s, dc$condition) # medium, success
describeBy(dc$trust_game_h_s, dc$condition) # hard, success
describeBy(dc$trust_game_e_f, dc$condition) # easy, fail
describeBy(dc$trust_game_m_f, dc$condition) # medium, fail
describeBy(dc$trust_game_h_f, dc$condition) # hard, fail
```


# Regression Tests - trust survey 1
```{r}
# regression tests (trust survey 1 confirm no sig differences b/w conditions
m1 = lm(gators_1 ~ condition, data = d1)
summary(m1)
Anova(m1, type = 3, test = "F")

m2 = lm(trust_tech_1 ~ condition, data = d1)
summary(m2)
Anova(m2, type = 3, test = "F")

m3 = lm(risk_1 ~ condition, data = d1)
summary(m3)
Anova(m3, type = 3, test = "F")

m4 = lm(confidence_1 ~ condition, data = d1)
summary(m4)
Anova(m4, type = 3, test = "F")
```

# Regression Tests - trust survey 2
```{r}
m5 = lm(gators_2 ~ condition, data = d2)
summary(m5)
Anova(m5, type = 3, test = "F")

m6 = lm(toast ~ condition, data = d2)
summary(m6)
Anova(m6, type = 3, test = "F")

m7 = lm(mdmt ~ condition, data = d2)
summary(m7)
Anova(m7, type = 3, test = "F")

m8 = lm(rosas ~ condition, data = d2)
summary(m8)
Anova(m8, type = 3, test = "F")

m9 = lm(intention ~ condition, data = d2)
summary(m9)
Anova(m9, type = 3, test = "F")

m10 = lm(self_efficacy ~ condition, data = d2)
summary(m10)
Anova(m10, type = 3, test = "F")

m11 = lm(fluency ~ condition, data = d2)
summary(m11)
Anova(m11, type = 3, test = "F")

m12 = lm(behavioral_trust ~ condition, data = d2)
summary(m12)
Anova(m12, type = 3, test = "F")

m13 = lm(mind ~ condition, data = d2)
summary(m13)
Anova(m13, type = 3, test = "F")

# robot behaves as if own beliefs and desires
m14 = lm(mind ~ condition, data = d2)
summary(m14)
Anova(m14, type = 3, test = "F")
```


# Regression Tests - trust survey 3
```{r}
m13 = lm(synchrony ~ condition, data = d3)
summary(m13)
Anova(m13, type = 3, test = "F")

m14 = lm(enjoy_task ~ condition, data = d3)
summary(m14)
Anova(m14, type = 3, test = "F")
```


# Regression Tests - trust computer task
```{r}
# regression test (trust game by condition)
m1 = lm(trust_game ~ condition, data = dc)
summary(m1)
Anova(m1, type = 3, test = "F")

# regression test (trust game (easy, no info), by condition)
m2 = lm(trust_game_e_n ~ condition, data = dc)
summary(m2)
Anova(m2, type = 3, test = "F")

# regression test (trust game (medium, no info), by condition)
m3 = lm(trust_game_m_n ~ condition, data = dc)
summary(m3)
Anova(m3, type = 3, test = "F")

# regression test (trust game (hard, no info), by condition)
m4 = lm(trust_game_h_n ~ condition, data = dc)
summary(m4)
Anova(m4, type = 3, test = "F")

# regression test (trust game (easy, success), by condition)
m5 = lm(trust_game_e_s ~ condition, data = dc)
summary(m5)
Anova(m5, type = 3, test = "F")

# regression test (trust game (medium, success), by condition)
m6 = lm(trust_game_m_s ~ condition, data = dc)
summary(m6)
Anova(m6, type = 3, test = "F")

# regression test (trust game (hard, success), by condition)
m7 = lm(trust_game_h_s ~ condition, data = dc)
summary(m7)
Anova(m7, type = 3, test = "F")

# regression test (trust game (easy, fail), by condition)
m8 = lm(trust_game_e_f ~ condition, data = dc)
summary(m8)
Anova(m8, type = 3, test = "F")

# regression test (trust game (medium, fail), by condition)
m9 = lm(trust_game_m_f ~ condition, data = dc)
summary(m9)
Anova(m9, type = 3, test = "F")

# regression test (trust game (hard, fail), by condition)
m10 = lm(trust_game_h_f ~ condition, data = dc)
summary(m10)
Anova(m10, type = 3, test = "F")
```


### Visualization: trust easy (no info) by condition
```{r}
dc$condition_str <- dplyr::recode(dc$condition, "0" = 'Control',"1" = 'Synchronous')

m_graph1 <- lm(trust_game_e_n ~ condition_str, data = dc)

p1 <- as.data.frame(effect('condition_str', m_graph1))

plot1 = ggplot(p1, aes(x = condition_str, y = fit, fill = condition_str, group = 1)) +
  geom_bar(stat = "identity", width = .4) +
  geom_errorbar(aes(ymin = fit - se, ymax = fit + se), stat = 'identity', width = .2) +
  theme_bw() + ylab("Trust Game easy (no info)") +
  labs(title = "") +
  xlab("Condition") + 
  theme(legend.position = "none") +
  scale_fill_manual(values = c("lightblue", "darkblue")) +
  scale_y_continuous() +
  theme(axis.line = element_line(), panel.grid.major = element_blank(), 
        panel.grid.minor = element_blank(),
        panel.border = element_blank(),
        panel.background = element_blank())
plot1
```
